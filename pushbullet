#!/bin/bash
# Bash interface to the PushBullet api.
# Original Author: Red5d - https://github.com/Red5d
# Author: Sean Payne - https://github.com/zerodivide1

if [[ -z "$CONFIG" ]]
then
	CONFIG=${XDG_CONFIG_HOME:-$HOME/.config}/pushbullet
fi

API_URL=https://api.pushbullet.com/v2

source $CONFIG

die() {
	echo $1
	exit 1
}

printUsage() {
echo "Usage: pushbullet <action> <device> <type> <data>

Actions: 
list - Lists all devices in your PushBullet account. (does not require additional parameters)
recent - Retrieves recent pushes (optional type as argument; returns newest since last zero-arg invocation)
push - Pushes data to a device. (the device name can simply be a unique part of the name that \"list\" returns)
get - Retrieve a specific push (requires the iden of the push as parameter)
stream - Stream and execute given command for each new push

Types: 
note
address
list
file
link

Type Parameters: 
(all parameters must be put inside quotes if more than one word)
\"note\" type: 	give the title, then the note text.
\"address\" type: give the address name, then the address or Google Maps query.
\"list\" type: 	give the name of the list, then each of the list items, separated by spaces.
\"file\" type: 	give the path to the file.
\"link\" type: 	give the title of the link, then the url.

Streaming Info:
Command to execute given as subsequent params.
Executes the command on every new push since the last time 'recent' was used.
Iden of the push is provided as the last parameter
Ex.
pushbullet monitor echo
"
}


if [ "$1" = "" ];then

if [ "$API_KEY" = "" ];then
echo -e "\e[0;33mWarning, your API key is not set.\nPlease create $CONFIG with a line starting with API_KEY= and your PushBullet key\e[00m"
fi

printUsage
exit
fi

getdevices() {
	curl -s "$API_URL/devices" -u $API_KEY: | jq ".devices"
}

dopush() {
	curl_flag="$1"
	shift
	device_id="$1"
	shift
	push_type="$1"
	shift
	args=()
	while [ "$1" ]
	do
		arg_name="$1"
		shift
		arg_value="$1"
		shift
		
		args+=(-$curl_flag "$arg_name"="$arg_value")
	done
	if [ -z "$device_id" ]
	then
		curl_result=$( curl -qSfsw '\n%{http_code}' "$API_URL/pushes" -u $API_KEY: -X POST -$curl_flag type=$push_type "${args[@]}" ) 2>/dev/null
	else
		curl_result=$( curl -qSfsw '\n%{http_code}' "$API_URL/pushes" -u $API_KEY: -X POST -$curl_flag device_iden=$device_id -$curl_flag type=$push_type "${args[@]}" ) 2>/dev/null
	fi
	curl_result_code=$(echo "$curl_result" | tail -n1)
	curl_result_body=$(echo "$curl_result" | head -n-1)
	case "$curl_result_code" in
		"200")
			push_id=$(echo "$curl_result_body" | jq -r ".iden")
			echo "OK $push_id"
			;;
		*)
			echo "Failed:"
			echo "$curl_result_body"
			;;
	esac
}

case $1 in
list)
	echo "Available devices (use empty string in quotes to push to all devices):"
	echo "----------------------------------------------------------------------"
	getdevices | jq -r '.[].nickname'
	;;
push)
	if [ -z "$2" ]
	then
		dev_id=""
	else
		dev_id=$(getdevices | jq ".[] | select(.nickname==\"$2\")" | jq -r ".iden")
	fi

	case $3 in
	note)
		note_result=$(dopush d "$dev_id" note title "$4" body "$5")
		echo "$note_result"
	;;

	address)
		address_result=$(dopush d "$dev_id" address name "$4" address "$5")
		echo "$address_result"
	;;

	list)
		#Prepare list by combining arguments
		list_args=()
		for i in "${@:5}"
		do
			list_args+=(items "$i")
		done
		list_result=$(dopush d "$dev_id" list title "$4" "${list_args[@]}")
		echo "$list_result"
	;;

	file)
		file_result=$(dopush F "$dev_id" file file "@$4")
		echo "$file_result"
	;;

	link)
		link_result=$(dopush d "$dev_id" link title "$4" url "$5")
		echo "$link_result"
	;;
	esac

;;

recent)
	if [[ -z "$LASTMODIFIED" ]]
	then
		LASTMODIFIED=0
	fi

	curl_result=$( curl -qSfsw '\n%{http_code}' "$API_URL/pushes?modified_after=$LASTMODIFIED" -u $API_KEY: ) 2>/dev/null
	curl_result_code=$(echo "$curl_result" | tail -n1)
	curl_result_body=$(echo "$curl_result" | head -n-1)
	case "$curl_result_code" in
		"200")
			LASTMODIFIEDTEMP=$(echo "$curl_result_body" | jq -r '.pushes[].modified' | sort -r | head -1)
			case "$2" in
				"note")
					pushes=$(echo "$curl_result_body" | jq ".pushes | map(select(.type==\"note\")) | [.[] | {iden,title,body}]")
					;;
				"link")
					pushes=$(echo "$curl_result_body" | jq ".pushes | map(select(.type==\"link\")) | [.[] | {iden,title,body,url}]")
					;;
				"list")
					pushes=$(echo "$curl_result_body" | jq ".pushes | map(select(.type==\"list\")) | [.[] | {iden,title,items}]")
					;;
				"address")
					pushes=$(echo "$curl_result_body" | jq ".pushes | map(select(.type==\"address\")) | [.[] | {iden,name,address}]")
					;;
				"file")
					pushes=$(echo "$curl_result_body" | jq ".pushes | map(select(.type==\"file\")) | [.[] | {iden,file_name,file_type,file_url,body}]")
					;;
				*)
					pushes=$(echo "$curl_result_body" | jq ".pushes | map(select(.type==\"note\" or .type==\"link\" or .type==\"list\" or .type==\"address\" or .type==\"file\")) | [.[] | {iden,type,title,name,file_name}]")
if [[ -z "$LASTMODIFIEDTEMP" ]]
then
echo "API_KEY=$API_KEY
LASTMODIFIED=$LASTMODIFIED" > $CONFIG
else
echo "API_KEY=$API_KEY
LASTMODIFIED=$LASTMODIFIEDTEMP" > $CONFIG
fi
					;;
			esac
			echo "$pushes"

			;;
		*)
			echo "Failed:"
			echo "$curl_result_body"
			;;
	esac


;;

get)
	if [[ -z "$2" ]]
	then
		printUsage
		exit
	fi

	curl_result=$( curl -qSfsw '\n%{http_code}' "$API_URL/pushes?modified_after=0" -u $API_KEY: ) 2>/dev/null
	curl_result_code=$(echo "$curl_result" | tail -n1)
	curl_result_body=$(echo "$curl_result" | head -n-1)
	case "$curl_result_code" in
		"200")
			push=$(echo "$curl_result_body" | jq ".pushes | map(select(.iden==\"$2\"))")
			echo "$push"
		;;
		*)
			echo "Failed:"
			echo "$curl_result_body"
		;;
	esac
;;

stream)
  which wssh > /dev/null || die "wssh not installed: https://github.com/progrium/wssh"
	if [[ -z "${@:2}" ]]
	then
		die "No command to execute specified for new items"
	fi
	wsshCmd=$(which wssh)

	$wsshCmd -n wss://stream.pushbullet.com/websocket/$API_KEY | while read -r line ; do
		MSGTYPE=$(echo $line | jq -r '.type')
		if [[ "$MSGTYPE" == "tickle" ]]
		then
			SUBTYPE=$(echo $line | jq -r '.subtype')
			if [[ "$SUBTYPE" == "push" ]]
			then
				$0 recent | jq -c -M -r '.[].iden' | while read -r pushIden ; do
					${@:2} $pushIden
				done
			fi
		fi
	done
;;

*)
  printUsage
;;
esac

