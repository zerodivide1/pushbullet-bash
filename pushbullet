#!/bin/bash
# Bash interface to the PushBullet api.
# Original Author: Red5d - https://github.com/Red5d
# Author: Sean Payne - https://github.com/zerodivide1

if [[ -z "$CONFIG" ]]
then
	CONFIG=${XDG_CONFIG_HOME:-$HOME/.config}/pushbullet
fi

API_URL=https://api.pushbullet.com/v2

source $CONFIG

printUsage() {
echo "Usage: pushbullet <action> <device> <type> <data>

Actions: 
list - Lists all devices in your PushBullet account. (does not require additional parameters)
push - Pushes data to a device. (the device name can simply be a unique part of the name that "list" returns)

Types: 
note
address
list
file
link

Type Parameters: 
(all parameters must be put inside quotes if more than one word)
\"note\" type: 	give the title, then the note text.
\"address\" type: give the address name, then the address or Google Maps query.
\"list\" type: 	give the name of the list, then each of the list items, separated by spaces.
\"file\" type: 	give the path to the file.
\"link\" type: 	give the title of the link, then the url.
"
}


if [ "$1" = "" ];then

if [ "$API_KEY" = "" ];then
echo -e "\e[0;33mWarning, your API key is not set.\nPlease create $CONFIG with a line starting with API_KEY= and your PushBullet key\e[00m"
fi

printUsage
exit
fi

getdevices() {
	curl -s "$API_URL/devices" -u $API_KEY: | jq ".devices"
}

dopush() {
	curl_flag="$1"
	shift
	device_id="$1"
	shift
	push_type="$1"
	shift
	args=()
	while [ "$1" ]
	do
		arg_name="$1"
		shift
		arg_value="$1"
		shift
		
		args+=(-$curl_flag "$arg_name"="$arg_value")
	done
	if [ -z "$device_id" ]
	then
		curl_result=$( curl -qSfsw '\n%{http_code}' "$API_URL/pushes" -u $API_KEY: -X POST -$curl_flag type=$push_type "${args[@]}" ) 2>/dev/null
	else
		curl_result=$( curl -qSfsw '\n%{http_code}' "$API_URL/pushes" -u $API_KEY: -X POST -$curl_flag device_iden=$device_id -$curl_flag type=$push_type "${args[@]}" ) 2>/dev/null
	fi
	curl_result_code=$(echo "$curl_result" | tail -n1)
	curl_result_body=$(echo "$curl_result" | head -n-1)
	case "$curl_result_code" in
		"200")
			push_id=$(echo "$curl_result_body" | jq -r ".iden")
			echo "OK $push_id"
			;;
		*)
			echo "Failed:"
			echo "$curl_result_body"
			;;
	esac
}

case $1 in
list)
	echo "Available devices (use empty string in quotes to push to all devices):"
	echo "----------------------------------------------------------------------"
	getdevices | jq -r '.[].nickname'
	;;
push)
	if [ -z "$2" ]
	then
		dev_id=""
	else
		dev_id=$(getdevices | jq ".[] | select(.nickname==\"$2\")" | jq -r ".iden")
	fi

	case $3 in
	note)
		note_result=$(dopush d "$dev_id" note title "$4" body "$5")
		echo "$note_result"
	;;

	address)
		address_result=$(dopush d "$dev_id" address name "$4" address "$5")
		echo "$address_result"
	;;

	list)
		#Prepare list by combining arguments
		list_args=()
		for i in "${@:5}"
		do
			list_args+=(items "$i")
		done
		list_result=$(dopush d "$dev_id" list title "$4" "${list_args[@]}")
		echo "$list_result"
	;;

	file)
		file_result=$(dopush F "$dev_id" file file "@$4")
		echo "$file_result"
	;;

	link)
		link_result=$(dopush d "$dev_id" link title "$4" url "$5")
		echo "$link_result"
	;;
	esac

;;

*)
  printUsage
;;
esac

